[js]

function sortCssTable(obj){
	if(!$(obj.element)){
		return;
	}
	var t = $(obj.element).select(obj.rows), //table-elements to be sorted
		h = $(obj.element).select(obj.cols), //column-headers
		c = new Element('div', {'class': 'noprint'}), //checkbox-container
		tsort = function(e){
			if(!t || t.length == 0){
				return;
			}
			e.addDataset();
			var col = e.dataset.id,
				check = getContent(t[0].childElements()[col]);
			//sort-functions - you may add your own if needed
			//date dd.mm.yyyy
			if(check.match(/\d{2}[.]\d{2}[.]\d{4}/)){
				console.log('/\\d{2}[.]\\d{2}[.]\\d{4}/');
				t.sort(function(a, b){
					a = getContent(a.childElements()[col]);
					a = a.substr(6, 4)+a.substr(3, 2)+a.substr(0, 2);
					b = getContent(b.childElements()[col]);
					b = b.substr(6, 4)+b.substr(3, 2)+b.substr(0, 2);
					if(a == b){
						return 0;
					}
					if(a < b){
						return -1;
					}
					return 1;
				});
			}
			//numeric
			else if(check.replace(/^\s+|\s+$/g, '').match(/^[\d\.\-\+]+$/)){
				console.log('/^[\\d\\.\\-\\+]+$/');
				t.sort(function(a, b){
					a = parseFloat(getContent(a.childElements()[col]).replace(/^\s+|\s+$/g, ''));
					b = parseFloat(getContent(b.childElements()[col]).replace(/^\s+|\s+$/g, ''));
					if(isNaN(a)){
						a = 0;
					}
					if(isNaN(b)){
						b = 0;
					}
					return a-b;
				});
			}
			//string
			else{
				console.log(check.replace(/[\s%]+/g, ''));
				t.sort(function(a, b){
					a = getContent(a.childElements()[col]);
					b = getContent(b.childElements()[col]);
					return a.localeCompare(b);
				});
			}

			$$('.indicator').invoke('update', '');

			if(e.dataset.sortdir == 'asc'){
				t.reverse();
				$(obj.element+'-col-'+col).update(String.fromCharCode(160, 9660));
				e.dataset.sortdir = 'desc';
			}
			else{
				$(obj.element+'-col-'+col).update(String.fromCharCode(160, 9650));
				e.dataset.sortdir = 'asc';
			}

			t.each(function(row){
				row.childElements().invoke('removeClassName', 'highlight');
				row.childElements()[col].addClassName('highlight');
				$(obj.element).appendChild(row);
			});
		},

		getContent = function(e){
			if(typeof(e.textContent) != 'undefined'){
				return e.textContent;
			}
			if(typeof(e.innerText) != 'undefined'){
				return e.innerText;
			}
			if(typeof(e.innerHTML) == 'string'){
				return e.innerHTML.stripScripts().stripTags();
			}
		},

		toggleColumn = function(num, toggle){
			var a = new Array(h[num]);
			t.each(function(e){
				a.push(e.childElements()[num]);
			});
			if(!toggle){
				a.invoke('hide');
			}
			else{
				a.invoke('show');
			}
		};

	if(!h || h.length == 0){
		return;
	}

	h.each(function(e, i){
		var check = new Element('input', {'type': 'checkbox', 'value': i}).observe('change', function(){
			toggleColumn(this.value, this.checked);
		});
		if(e.readAttribute('data-show') == 'false'){
			toggleColumn(i, false);
		} //e.dataset.show looks better, but... I HATE YOU, IE!
		else{
			check.writeAttribute('checked', 'checked');
		}
		c.insert(check).insert(getContent(e)).insert(new Element('br'));
		e.insert({bottom: new Element('span', {'class': 'indicator', 'id': obj.element+'-col-'+i})}).writeAttribute('data-id', i).observe('click', function(){
			tsort(this);
		});
	});

	if(obj.checks === false){
		c = null;
	}
	else if($(obj.checks) != null){
		$(obj.checks).insert(c);
	}
	else{
		$(obj.element).insert({before: c});
	}

}[/js]
